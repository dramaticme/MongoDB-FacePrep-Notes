//finding price between 700 - 900
----------code---------
package Connection;
import org.bson.Document;

import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
//import com.mongodb.client.MongoIterable;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Updates;

public class MongoDB_COMPASS {
   public static void main(String[] args) {
      MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
      
      MongoDatabase database = mongoClient.getDatabase("myDb");
      
     
      MongoCollection<Document> collection = database.getCollection("products");
      
      Document priceRangeQuery = new Document("price", new Document("$gte", 700).append("$lte", 900));
     
     
     FindIterable<Document> documents = collection.find(priceRangeQuery);
     
     for(Document document : documents) {
    	 System.out.println(document);
     }
      
      
   }
}
--------output--------
Jun 11, 2025 1:19:19 PM com.mongodb.diagnostics.logging.Loggers shouldUseSLF4J
WARNING: SLF4J not found on the classpath.  Logging is disabled for the 'org.mongodb.driver' component
Document{{_id=1, name=xPhone, price=799, releaseDate=Sat May 14 05:30:00 IST 2011, spec=Document{{ram=4, screen=6.5, cpu=2.66}}, color=[white, black], storage=[64, 128, 256]}}
Document{{_id=2, name=xTablet, price=899, releaseDate=Thu Sep 01 05:30:00 IST 2011, spec=Document{{ram=16, screen=9.5, cpu=3.66}}, color=[white, black, purple], storage=[128, 256, 512]}}
Document{{_id=3, name=SmartTablet, price=899, releaseDate=Wed Jan 14 05:30:00 IST 2015, spec=Document{{ram=12, screen=9.7, cpu=3.66}}, color=[blue], storage=[16, 64, 128]}}

//avg of price
package Connection;

import com.mongodb.client.*;
import org.bson.Document;
import static com.mongodb.client.model.Aggregates.*;
import static com.mongodb.client.model.Filters.*;
import static com.mongodb.client.model.Accumulators.*;

import java.util.Arrays;

public class MongoDB_COMPASS {
    public static void main(String[] args) {
        
        MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");

        
        MongoDatabase database = mongoClient.getDatabase("myDb");
        MongoCollection<Document> collection = database.getCollection("products");

        
        AggregateIterable<Document> result = collection.aggregate(Arrays.asList(
            group(null, avg("averagePrice", "$price"))
        ));

        
        for (Document doc : result) {
            System.out.println(doc.getDouble("averagePrice"));
        }

        mongoClient.close();
    }
}
---------output---------
Jun 11, 2025 1:26:29 PM com.mongodb.diagnostics.logging.Loggers shouldUseSLF4J
WARNING: SLF4J not found on the classpath.  Logging is disabled for the 'org.mongodb.driver' component
779.0
//we have multiple items within different items, now each item which product is having more price, lets say id number 9 is max of Cappuccino product price, so print those.

---------code--------
package Connection;

import org.bson.Document;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import static com.mongodb.client.model.Aggregates.*;
import static com.mongodb.client.model.Accumulators.*;
import static com.mongodb.client.model.Sorts.*;
import java.util.Arrays;

public class MongoDB_COMPASS {
    public static void main(String[] args) {
        try (MongoClient mongo = MongoClients.create("mongodb://localhost:27017")) {
            MongoDatabase db = mongo.getDatabase("myDb");
            MongoCollection<Document> sales = db.getCollection("sales");
            
            sales.aggregate(Arrays.asList(
                group("$item", 
                    max("maxPrice", "$price"),
                    addToSet("sizes", "$size")
                ),
                sort(descending("maxPrice"))
            )).forEach((Document doc) -> {
                System.out.printf("%-10s: $%2d (Sizes: %s)%n",
                    doc.getString("_id"),
                    doc.getInteger("maxPrice"),
                    doc.getList("sizes", String.class));
            });
        }
    }
}
--------output--------
Jun 11, 2025 2:11:13 PM com.mongodb.diagnostics.logging.Loggers shouldUseSLF4J
WARNING: SLF4J not found on the classpath.  Logging is disabled for the 'org.mongodb.driver' component
Mochas    : $25 (Sizes: [Tall])
Lattes    : $25 (Sizes: [Tall, Grande])
Cappuccino: $10 (Sizes: [Short, Tall, Grande])
Americanos: $10 (Sizes: [Short, Tall, Grande])
